
THIS IS THE OUTPUT OF ALL THE ROUTES IN THE 'iss_tracker.py' API
Using epoch variable: 1


*************************************************************************************
Testing Route: '/epochs/1'
{"EPOCH":"2023-067T12:00:00.000Z","X":{"#text":"943.80264099999999","@units":"km"},"X_DOT":{"#text":"4.9425251039999996","@units":"km/s"},"Y":{"#text":"-6604.9778539999998","@units":"km"},"Y_DOT":{"#text":"-0.45499505499999998","@units":"km/s"},"Z":{"#text":"1300.4429279999999","@units":"km"},"Z_DOT":{"#text":"-5.8346658140000001","@units":"km/s"}}


*************************************************************************************
Testing Route: '/epochs/1/speed'
{"speed (km/s)":7.660215405901125}


*************************************************************************************
Testing Route: '/epochs/1/position'
{"X":"943.80264099999999","Y":"-6604.9778539999998","Z":"1300.4429279999999"}


*************************************************************************************
Testing Route: '/epochs/1/velocity'}
["4.9425251039999996","-0.45499505499999998","-5.8346658140000001"]


*************************************************************************************
Testing Route: '/help'

HERE IS A HELP MESSAGE FOR EVERY FUNCTION/ROUTE IN "iss_tracker.py"

get_data:

    Retrieves the data from the nasa published ISS location coordinates, converts from XML to a dictionary, and returns the 
    Valuable data concering the ISS position and velocity at different times. 

    Route: None, only used to retreive data for other routes

    Args:
        None

    Returns:
        data (dict): the ISS stateVectors at different epochs
    

get_all:

    Returns all epochs for the entire data set of the ISS state vectors. Decorated with the app route "<baseURL>/"

    Route: <baseURL>/

    Args:
        None

    Returns:
        dataSet (dict): Dictionary of all epochs and corresponding state Vectors of the ISS
    

get_epochs:

    Returns all the epochs in the data set, without the state Vectors. 
    
    Route: <baseURL>/epochs
        Optional Route: '<baseURL>/epochs?limit=<some_Int>&offset=<some_Int>'

    Args:
        None

    Returns:
        epochs (list): A list of all the epochs (time stamps) in the data set. 
    
    This function has query parameters 'limit' and 'offset' that affect the output by 
    changing the number of returned epochs and the starting point of the first returned epoch

get_entry:

    Given an epoch, returns the state vectors associated with that specific epoch.
    Decorated with the app route "<baseURL>/epochs/<epoch>"

    Route: <baseURL>/epochs/<int:epoch>

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        data[int(epoch)] (dict): returns the given index "epoch" of the data list from the full data set 
    

speed_calc:

    Given an epoch, returns the speed of the ISS at that specific epoch. 
    Speed is calculated from the X, Y, and Z velocities given in the data set. 
    
    Route: <baseURL>/epochs/<int:epoch>/speed

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        {"speed (km/s)" : speed} (dict): returns the speed of a given index "epoch"
    

get_position:

    Given an epoch, returns the position of the ISS at that specific epoch. 
    Position is given as the the X, Y, and Z positional coordinates. 
    
    Route: <baseURL>/epochs/<int:epoch>/position

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        position (dict): returns the X, Y, and Z positional coordinates of a given index "epoch"
    

get_velocity:

    Given an epoch, returns the velocity of the ISS at that specific epoch. 
    Velocity is given as the X, Y, and Z velocities. 

    Route: <baseURL>/epochs/<int:epoch>/velocity
    
    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        velo (list): returns the X, Y, and Z velocity of a given index "epoch"
    

get_help:

    Returns a message of all the available routes and methods and how to use them 
    
    Route: <baseURL>/help

    Args:
        NONE

    Returns:
        help_message (string) : brief descriptions of all available routes and methods
    

delete_data:

    Deletes all data from the data set
    
    Route: <baseURL>/delete-data
        example: 'curl -X DELETE localhost:5000/delete-data'

    Args:
        NONE

    Returns:
        (str) 'Data is deleted'
    

post_data:

    Restores the data to the ISS dictionary
    
    Route: <baseURL>/post-data
        example 'curl -X POST localhost:5000/post-data'

    Args:
        NONE

    Returns:
        (str) 'Data is posted'
    

get_comment:

    Returns the ‘comment’ list object from the ISS data
    
    Route: <baseURL>/comment

    Args:
        NONE

    Returns:
        (list) comments: All the comments in the data set
    

get_header:

    Returns the ‘header’ dictionary object from the ISS data
    
    Route: <baseURL>/header

    Args:
        NONE

    Returns:
        header (list): the ‘header’ dictionary object from the ISS data
    

get_metadata:

    Returns the 'metadata' dictionary object from the ISS data
    
    Route: <baseURL>/metadata

    Args:
        NONE

    Returns:
        metadata (list): the 'metadata' dictionary object from the ISS data
    

get_location:

    Returns latitude, longitude, altitude, and geoposition for a given epoch.

    Route: <baseURL>/epochs/<epoch>/location

    Args: 
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list.

    Returns:
        outputDict (dict): A dictionary of the latitude, longitude, altitude, and geoposition of the given epoch. 

    

recent_data:

    Return latitude, longitude, altitude, and geoposition for Epoch that is nearest in time

    Route: '<baseURL>/now'

    Args:
        NONE

    Returns:
        outputDict (dict): a dictionary containing the latitude, longitude, altitude, and geoposition
        for the most recent Epoch.
        
        outputDict Format:
            {
                "closest epoch": ------, 
                "seconds from now": -----, 
                "location": -----,
                "speed (km/s)": -----,
                "velocity (km/s) (X, Y, Z)": ------
            }
    



*************************************************************************************
Testing Route: '/delete-data'
Data is deleted


Now Testing a function, assuming delete-data function worked this should output no data


Testing Route: '/epochs/1/velocity'}


OUTPUT: (should be 'Data Set is empty' )
Data Set is empty 


*************************************************************************************
Testing Route: '/post-data'
Data has been posted


*************************************************************************************
Testing Route: '/comment'
["Units are in kg and m^2","MASS=473291.00","DRAG_AREA=1421.50","DRAG_COEFF=2.80","SOLAR_RAD_AREA=0.00","SOLAR_RAD_COEFF=0.00","Orbits start at the ascending node epoch","ISS first asc. node: EPOCH = 2023-03-08T12:50:10.295 $ ORBIT = 2617 $ LAN(DEG) = 108.61247","ISS last asc. node : EPOCH = 2023-03-23T11:58:44.947 $ ORBIT = 2849 $ LAN(DEG) = 32.65474","Begin sequence of events","TRAJECTORY EVENT SUMMARY:",null,"|       EVENT        |       TIG        | ORB |   DV    |   HA    |   HP    |","|                    |       GMT        |     |   M/S   |   KM    |   KM    |","|                    |                  |     |  (F/S)  |  (NM)   |  (NM)   |","=============================================================================","GMT067 Reboost        067:19:47:00.000             0.6     428.1     408.4","(2.0)   (231.1)   (220.5)",null,"Crew05 Undock         068:22:00:00.000             0.0     428.7     409.6","(0.0)   (231.5)   (221.2)",null,"SpX27 Launch          074:00:30:00.000             0.0     428.3     408.7","(0.0)   (231.2)   (220.7)",null,"SpX27 Docking         075:12:00:00.000             0.0     428.2     408.6","(0.0)   (231.2)   (220.6)",null,"=============================================================================","End sequence of events"]


*************************************************************************************
Testing Route: '/header'
{"CREATION_DATE":"2023-067T21:02:49.080Z","ORIGINATOR":"JSC"}


*************************************************************************************
Testing Route: '/metadata'
{"CENTER_NAME":"EARTH","OBJECT_ID":"1998-067-A","OBJECT_NAME":"ISS","REF_FRAME":"EME2000","START_TIME":"2023-067T12:00:00.000Z","STOP_TIME":"2023-082T12:00:00.000Z","TIME_SYSTEM":"UTC"}


*************************************************************************************
Testing Route: '/epochs/1/location'
{"Altitude":426.6207371384162,"Geoposition":"Over the Ocean","Latitude":11.029159199242079,"Longitude":-57.867905190541975}


