
THIS IS THE OUTPUT OF ALL THE ROUTES IN THE 'iss_tracker.py' API
Using epoch variable: 1


*************************************************************************************
Testing Route: '/epochs/1'
{
  "EPOCH": "2023-065T15:02:07.856Z",
  "X": {
    "#text": "633.73759800000005",
    "@units": "km"
  },
  "X_DOT": {
    "#text": "5.3899857857239999",
    "@units": "km/s"
  },
  "Y": {
    "#text": "-6183.8326969999998",
    "@units": "km"
  },
  "Y_DOT": {
    "#text": "-1.749985926915",
    "@units": "km/s"
  },
  "Z": {
    "#text": "2744.535206",
    "@units": "km"
  },
  "Z_DOT": {
    "#text": "-5.1563410460480004",
    "@units": "km/s"
  }
}


*************************************************************************************
Testing Route: '/epochs/1/speed'
{
  "speed (km/s)": 7.661739391147854
}


*************************************************************************************
Testing Route: '/epochs/1/position'
{
  "X": "633.73759800000005",
  "Y": "-6183.8326969999998",
  "Z": "2744.535206"
}


*************************************************************************************
Testing Route: '/epochs/1/velocity'}
[
  "5.3899857857239999",
  "-1.749985926915",
  "-5.1563410460480004"
]


*************************************************************************************
Testing Route: '/help'

HERE IS A HELP MESSAGE FOR EVERY FUNCTION/ROUTE IN "iss_tracker.py"

get_data:

    Retrieves the data from the nasa published ISS location coordinates, converts from XML to a dictionary, and returns the 
    Valuable data concering the ISS position and velocity at different times. 

    Route: None, only used to retreive data for other routes

    Args:
        None

    Returns:
        data (dict): the ISS stateVectors at different epochs
    

get_all:

    Returns all epochs for the entire data set of the ISS state vectors. Decorated with the app route "<baseURL>/"

    Route: <baseURL>/

    Args:
        None

    Returns:
        dataSet (dict): Dictionary of all epochs and corresponding state Vectors of the ISS
    

get_epochs:

    Returns all the epochs in the data set, without the state Vectors. 
    
    Route: <baseURL>/epochs

    Args:
        None

    Returns:
        epochs (list): A list of all the epochs (time stamps) in the data set. 
    

get_entry:

    Given an epoch, returns the state vectors associated with that specific epoch.
    Decorated with the app route "<baseURL>/epochs/<epoch>"

    Route: <baseURL>/epochs/<int:epoch>

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        data[int(epoch)] (dict): returns the given index "epoch" of the data list from the full data set 
    

speed_calc:

    Given an epoch, returns the speed of the ISS at that specific epoch. 
    Speed is calculated from the X, Y, and Z velocities given in the data set. 
    
    Route: <baseURL>/epochs/<int:epoch>/speed

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        {"speed (km/s)" : speed} (dict): returns the speed of a given index "epoch"
    

get_position:

    Given an epoch, returns the position of the ISS at that specific epoch. 
    Position is given as the the X, Y, and Z positional coordinates. 
    
    Route: <baseURL>/epochs/<int:epoch>/position

    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        position (dict): returns the X, Y, and Z positional coordinates of a given index "epoch"
    

get_velocity:

    Given an epoch, returns the velocity of the ISS at that specific epoch. 
    Velocity is given as the X, Y, and Z velocities. 

    Route: <baseURL>/epochs/<int:epoch>/velocity
    
    Args:
        epoch (string): returns a string representing the epoch entry index number as an int. 
            - Note: epoch is given as a string but is converted to and used as a integer to index a list. 

    Returns:
        velo (list): returns the X, Y, and Z velocity of a given index "epoch"
    

get_help:

    Returns a message of all the available routes and methods and how to use them 
    
    Route: <baseURL>/help

    Args:
        NONE

    Returns:
        help_message (string) : brief descriptions of all available routes and methods
    

delete_data:

    Deletes all data from the data set
    
    Route: <baseURL>/delete-data
        example: 'curl -X DELETE localhost:5000/delete-data'

    Args:
        NONE

    Returns:
        (str) 'Data is deleted'
    

post_data:

    Restores the data to the ISS dictionary
    
    Route: <baseURL>/post-data
        example 'curl -X POST localhost:5000/post-data'

    Args:
        NONE

    Returns:
        (str) 'Data is posted'
    



*************************************************************************************
Testing Route: '/delete-data'
Data is deleted


Now Testing a function, assuming delete-data function worked this should output no data


Testing Route: '/epochs/1/velocity'}


OUTPUT: (should be 'Data Set is empty' )
Data Set is empty 


*************************************************************************************
Testing Route: '/post-data'
Data has been posted


*************************************************************************************
Testing Route: '/comment'
[
  "Units are in kg and m^2",
  "MASS=473413.00",
  "DRAG_AREA=1421.50",
  "DRAG_COEFF=2.50",
  "SOLAR_RAD_AREA=0.00",
  "SOLAR_RAD_COEFF=0.00",
  "Orbits start at the ascending node epoch",
  "ISS first asc. node: EPOCH = 2023-03-06T15:56:39.441 $ ORBIT = 2588 $ LAN(DEG) = 73.09384",
  "ISS last asc. node : EPOCH = 2023-03-21T13:33:16.732 $ ORBIT = 2819 $ LAN(DEG) = 20.51128",
  "Begin sequence of events",
  "TRAJECTORY EVENT SUMMARY:",
  null,
  "|       EVENT        |       TIG        | ORB |   DV    |   HA    |   HP    |",
  "|                    |       GMT        |     |   M/S   |   KM    |   KM    |",
  "|                    |                  |     |  (F/S)  |  (NM)   |  (NM)   |",
  "=============================================================================",
  "GMT067 Reboost Optio  067:19:47:00.000             0.6     428.1     408.5",
  "(2.0)   (231.2)   (220.5)",
  null,
  "Crew05 Undock         068:08:00:00.000             0.0     428.7     409.9",
  "(0.0)   (231.5)   (221.3)",
  null,
  "SpX27 Launch          074:00:30:00.000             0.0     428.4     408.9",
  "(0.0)   (231.3)   (220.8)",
  null,
  "SpX27 Docking         075:12:00:00.000             0.0     428.4     408.7",
  "(0.0)   (231.3)   (220.7)",
  null,
  "=============================================================================",
  "End sequence of events"
]


*************************************************************************************
Testing Route: '/header'
{
  "CREATION_DATE": "2023-066T03:37:31.258Z",
  "ORIGINATOR": "JSC"
}


*************************************************************************************
Testing Route: '/metadata'
{
  "CENTER_NAME": "EARTH",
  "OBJECT_ID": "1998-067-A",
  "OBJECT_NAME": "ISS",
  "REF_FRAME": "EME2000",
  "START_TIME": "2023-065T15:02:07.856Z",
  "STOP_TIME": "2023-080T15:02:07.856Z",
  "TIME_SYSTEM": "UTC"
}


*************************************************************************************
Testing Route: '/epochs/1/location'
{
  "Altitude": 424.1367657007877,
  "Geoposition": "Pueblo Nuevo, Durango, Mexico",
  "Latitude": 23.822024570082206,
  "Longitude": -105.6485860902855
}


